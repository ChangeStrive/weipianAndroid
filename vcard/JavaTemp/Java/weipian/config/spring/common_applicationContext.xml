<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd"
 default-lazy-init="true">
	
	<!-- 数据源-->
	<bean id="htDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<property name="driverClassName">
			<value>org.logicalcobwebs.proxool.ProxoolDriver</value>
		</property>
		<property name="url">
			<value>proxool.platformdb</value>
		</property>
	</bean>
	
	<bean id="dataSourceFacede" class="org.logicalcobwebs.proxool.ProxoolFacade" destroy-method="shutdown"></bean>

	<!--SessionFactory-->
	<bean id="htSessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="htDataSource"></property>
   		<property name="packagesToScan">
			<list>
				<value>com.**.model</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<prop key="hibernate.default_batch_fetch_size">12</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics" >true</prop>
			</props>
		</property>
	</bean>
	<!-- 事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"> 
    	<property name="sessionFactory"> 
       		<ref bean="htSessionFactory" /> 
   		</property> 
	</bean>
	
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>	
	
  <bean id="transactionAutoProxy"  class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"> 
       <property name="beanNames"> 
          <list> 
             <value>*Service</value> 
          </list> 
       </property> 
       <property name="interceptorNames"> 
          <list> 
             <value>transactionInterceptor</value> 
          </list> 
       </property> 
    </bean>
    
    <!--数据库访问器 -->
    
	<bean id="DbAccessor" class="com.platform.base.DbAccessorImpl" >
		<property name="sessionFactory">
			<ref bean="htSessionFactory" /> 
		</property>
	</bean>
	
	<!-- 我们使用abstract属性显式地将父bean定义标记为抽象的 -->
	<bean id="BaseService" class="com.platform.base.BaseService"  abstract="true">
		<property name="dbAccessor">
			<ref bean="DbAccessor" /> 
		</property>
	</bean>

	
	<!-- authorized -->
	 <bean id="AppContext" class="com.platform.sys.context.AppContextImpl" init-method="init" lazy-init="false"></bean>
	 	 
	<!-- component-scan自动搜索@Component , @Controller , @Service , @Repository等标注的类 -->
	<context:component-scan base-package="com.**.service" />
	
 </beans>

